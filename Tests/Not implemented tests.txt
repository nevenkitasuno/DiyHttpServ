Concurrent connections test
Description from codecrafters.io:

The tester will execute your program like this:

$ ./your_server.sh

Then, the tester will create multiple concurrent TCP connections to your server. (The exact number of connections is determined at random.) After that, the tester will send a single GET request through each of the connections.

$ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &
$ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &
$ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &

Your server must respond to each request with the following response:

HTTP/1.1 200 OK\r\n\r\n

---

Return a file test
Description from codecrafters.io:

The tester will execute your program with a --directory flag. The --directory flag specifies the directory where the files are stored, as an absolute path.

$ ./your_server.sh --directory /tmp/

The tester will then send two GET requests to the /files/{filename} endpoint on your server.

First request
The first request will ask for a file that exists in the files directory:

$ echo -n 'Hello, World!' > /tmp/foo
$ curl -i http://localhost:4221/files/foo

Your server must respond with a 200 response that contains the following parts:

Content-Type header set to application/octet-stream.
Content-Length header set to the size of the file, in bytes.
Response body set to the file contents.
HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 14\r\n\r\nHello, World!
Second request
The second request will ask for a file that doesn't exist in the files directory:

$ curl -i http://localhost:4221/files/non_existant_file
Your server must respond with a 404 response:

HTTP/1.1 404 Not Found\r\n\r\n

---

Content-Encoding header not exists if no "gzip" in Accept-Encoding test not implemented yet.

---

Gzip compression test
Description from codecrafters.io:

The tester will execute your program like this:

$ ./your_server.sh
Then, the tester will send a GET request to the /echo/{str} endpoint on your server. The request will contain an Accept-Encoding header that includes gzip.

$ curl -v -H "Accept-Encoding: gzip" http://localhost:4221/echo/abc | hexdump -C
Your server's response must contain the following:

200 response code.
Content-Type header set to text/plain.
Content-Encoding header set to gzip.
Content-Length header set to the size of the compressed body.
Response body set to the gzip-compressed str parameter.
HTTP/1.1 200 OK
Content-Encoding: gzip
Content-Type: text/plain
Content-Length: 23

1F 8B 08 00 00 00 00 00  // Hexadecimal representation of the response body
00 03 4B 4C 4A 06 00 C2
41 24 35 03 00 00 00
Notes
To check that your compressed body is correct, you can run echo -n <uncompressed-str> | gzip | hexdump -C.
It's normal for a very short string like abc to increase in size when compressed.